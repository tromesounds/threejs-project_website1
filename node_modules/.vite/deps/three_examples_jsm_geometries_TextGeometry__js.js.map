{
  "version": 3,
  "sources": ["../../three/examples/jsm/geometries/TextGeometry.js"],
  "sourcesContent": ["import {\r\n\tExtrudeGeometry\r\n} from 'three';\r\n\r\n/**\r\n * A class for generating text as a single geometry. It is constructed by providing a string of text, and a set of\r\n * parameters consisting of a loaded font and extrude settings.\r\n *\r\n * See the {@link FontLoader} page for additional details.\r\n *\r\n * `TextGeometry` uses [typeface.json]{@link http://gero3.github.io/facetype.js/} generated fonts.\r\n * Some existing fonts can be found located in `/examples/fonts`.\r\n *\r\n * ```js\r\n * const loader = new FontLoader();\r\n * const font = await loader.loadAsync( 'fonts/helvetiker_regular.typeface.json' );\r\n * const geometry = new TextGeometry( 'Hello three.js!', {\r\n * \tfont: font,\r\n * \tsize: 80,\r\n * \tdepth: 5,\r\n * \tcurveSegments: 12\r\n * } );\r\n * ```\r\n *\r\n * @augments ExtrudeGeometry\r\n * @three_import import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\r\n */\r\nclass TextGeometry extends ExtrudeGeometry {\r\n\r\n\t/**\r\n\t * Constructs a new text geometry.\r\n\t *\r\n\t * @param {string} text - The text that should be transformed into a geometry.\r\n\t * @param {TextGeometry~Options} [parameters] - The text settings.\r\n\t */\r\n\tconstructor( text, parameters = {} ) {\r\n\r\n\t\tconst font = parameters.font;\r\n\r\n\t\tif ( font === undefined ) {\r\n\r\n\t\t\tsuper(); // generate default extrude geometry\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t\t// defaults\r\n\r\n\t\t\tif ( parameters.depth === undefined ) parameters.depth = 50;\r\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\t\t\tsuper( shapes, parameters );\r\n\r\n\t\t}\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Represents the `options` type of the geometry's constructor.\r\n *\r\n * @typedef {Object} TextGeometry~Options\r\n * @property {Font} [font] - The font.\r\n * @property {number} [size=100] - The text size.\r\n * @property {number} [depth=50] - Depth to extrude the shape.\r\n * @property {number} [curveSegments=12] - Number of points on the curves.\r\n * @property {number} [steps=1] - Number of points used for subdividing segments along the depth of the extruded spline.\r\n * @property {boolean} [bevelEnabled=false] - Whether to beveling to the shape or not.\r\n * @property {number} [bevelThickness=10] - How deep into the original shape the bevel goes.\r\n * @property {number} [bevelSize=8] - Distance from the shape outline that the bevel extends.\r\n * @property {number} [bevelOffset=0] - Distance from the shape outline that the bevel starts.\r\n * @property {number} [bevelSegments=3] - Number of bevel layers.\r\n * @property {?Curve} [extrudePath=null] - A 3D spline path along which the shape should be extruded. Bevels not supported for path extrusion.\r\n * @property {Object} [UVGenerator] - An object that provides UV generator functions for custom UV generation.\r\n **/\r\n\r\nexport { TextGeometry };\r\n"],
  "mappings": ";;;;;AA2BA,IAAM,eAAN,cAA2B,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ1C,YAAa,MAAM,aAAa,CAAC,GAAI;AAEpC,UAAM,OAAO,WAAW;AAExB,QAAK,SAAS,QAAY;AAEzB,YAAM;AAAA,IAEP,OAAO;AAEN,YAAM,SAAS,KAAK,eAAgB,MAAM,WAAW,IAAK;AAI1D,UAAK,WAAW,UAAU,OAAY,YAAW,QAAQ;AACzD,UAAK,WAAW,mBAAmB,OAAY,YAAW,iBAAiB;AAC3E,UAAK,WAAW,cAAc,OAAY,YAAW,YAAY;AACjE,UAAK,WAAW,iBAAiB,OAAY,YAAW,eAAe;AAEvE,YAAO,QAAQ,UAAW;AAAA,IAE3B;AAEA,SAAK,OAAO;AAAA,EAEb;AAED;",
  "names": []
}
